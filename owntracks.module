<?php

/**
 * @file
 * Main functions of the module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\owntracks\Entity\OwnTracksLocationInterface;
use Drupal\owntracks\Entity\OwnTracksTransitionInterface;
use Drupal\owntracks\Entity\OwnTracksWaypointInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function owntracks_entity_extra_field_info() {
  $fields['owntracks_location']['owntracks_location']['display']['map'] = [
    'label' => t('Map'),
    'description' => t('Display a map with a location marker.'),
    'weight' => -10,
    'visible' => TRUE,
  ];

  $fields['owntracks_transition']['owntracks_transition']['display']['map'] = [
    'label' => t('Map'),
    'description' => t('Display a map with a transition marker.'),
    'weight' => -10,
    'visible' => TRUE,
  ];

  $fields['owntracks_waypoint']['owntracks_waypoint']['display']['map'] = [
    'label' => t('Map'),
    'description' => t('Display a map with a waypoint marker.'),
    'weight' => -10,
    'visible' => TRUE,
  ];

  return $fields;
}

/**
 * Implements hook_help().
 */
function owntracks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.owntracks':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function owntracks_owntracks_location_view(array &$build, OwnTracksLocationInterface $owntracks_location, EntityViewDisplayInterface $display) {
  if ($display->getComponent('map')) {
    $build['map'] = [
      '#theme' => 'owntracks_map',
      '#track' => [$owntracks_location->getLocation()],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function owntracks_owntracks_transition_view(array &$build, OwnTracksTransitionInterface $owntracks_transition, EntityViewDisplayInterface $display) {
  if ($display->getComponent('map')) {
    $build['map'] = [
      '#theme' => 'owntracks_map',
      '#track' => [$owntracks_transition->getLocation()],
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function owntracks_owntracks_waypoint_view(array &$build, OwnTracksWaypointInterface $owntracks_waypoint, EntityViewDisplayInterface $display) {
  if ($display->getComponent('map')) {
    $build['map'] = [
      '#theme' => 'owntracks_map',
      '#track' => [$owntracks_waypoint->getLocation()],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function owntracks_theme($existing, $type, $theme, $path) {
  return [
    'owntracks_location' => [
      'render element' => 'content',
    ],
    'owntracks_transition' => [
      'render element' => 'content',
    ],
    'owntracks_waypoint' => [
      'render element' => 'content',
    ],
    'owntracks_map' => [
      'file' => 'owntracks.theme.inc',
      'variables' => [
        'attributes' => [],
        'track' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function owntracks_user_delete(EntityInterface $entity) {
  $tables = [
    'owntracks_location',
    'owntracks_transition',
    'owntracks_waypoint',
  ];

  $database = \Drupal::database();

  foreach ($tables as $table) {
    $database->delete($table)
      ->condition('uid', $entity->id())
      ->execute();
  }
}
